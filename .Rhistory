install.packages("KernSmooth")
library(KernSmooth)
q()
add2 <- function(x, y) {
x+y
}
add2(4,6)
cube <- function(x,n) {
x^3
}
cube(3)
f <- function(x) {
g<- function(y) {
y+z
}
z<- 4
x+g(x)
}
z<-10
f(3)
getwd()
setwd
setwd()
setwd(F)
list.files("specdata")
setwd("F:/Fan/学习/Freshman/Coursera/R Programming")
q()
getwe()
getwd()
clear
mean(3,5)
df <- data.frame()
dat <- [3,5]
dat<-(3,5)
mean(1:10)
mean(2:5)
mean(2:5:3)
library(datasets)
data(iris)
?iris
head(iris)
tail(iris)
virginica <- subset(iris, iris$Species == virginica)
viuginica <- subset(iris, iris$Species == Virginica)
virginica <- subset(iris, iris$Species ==virginica)
setosa<- subset(iris, iris$Species==setosa)
dat<- data.frame()
iris[iris$Species == virginica, "Sepal.Length"]
length(iris$Species)
iris[149, "Species"]
iris[iris$Species, Sepal.Length]
iris[150, "Sepal.Length"]
View(iris)
?subset
virginica(iris, Species==virginica)
virginica<- subset(iris, Species==virginica)
subset(iris, Species)
subset(iris, Sepal.Length>4)
subset(iris, Species=virginica)
subset(iris, Species != setosa)
subset(iris, Species == virginica)
mean(iris$Sepal.Length)
?mean
mean(subset(iris, Species==virginica), Sepal.Length)
debug(lm)
library(datasets)
data(iris)
write.csv(iris, file="F:/iris.csv")
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
mtcars <- as.data.frame(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
cyl4<- subset(mtcars, mtcars$cyl==4)
cyl8<- subset(mtcars, mtcars$cyl==8)
mean(cyl4$hp)
mean(cyl8$hp)
209.2143-82.63636
tf<-matrix(1:4, 2,2)
tf
tf<-solve(tf)
tf
tforiginal<-matrix(1:4,2,2)
tforiginal
tf%*%tforiginal
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a<-makeVector()
a$set(c(1,2,3,4,5,6,7))
a$get
cachemean(1)
cachemean(a)
cachemean(a)
makeMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInv <- function(solve) m <<- solve
getInv <- function() m
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
cacheInv <- function(x) {
m <- x$getInv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(x)
x$setInv(m)
m
}
a<-makeMatrix()
a$set(matrix(1:9,3,3))
a$get
cacheInv(a)
a$set(matrix(1:4, ,2,2))
a$get
cacheInv(a)
b=makeMatrix()
b$get()
a=makeMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
a$get()
cacheInv(a)
cacheInv <- function(x,...) {
m <- x$getInv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(x)
x$setInv(m)
m
}
cacheInv(a)
testMatrix<-matrix(1:4, 2,2)
b<-makeMatrix(testMatrix)
cacheInv(b)
cacheInv <- function(x,...) {
m <- x$getInv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data,...)
x$setInv(m)
m
}
a=makeMatrix(matrix(c(1,2,3,4),nrow=2, ncol=2))
a$get()
cacheInv(a)
a$getinverse()
a$getInv
cacheInv(a)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInv <- function(solve) m <<- solve
getInv <- function() m
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
cacheSolve <- function(x,...) {
m <- x$getInv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data,...)
x$setInv(m)
m
}
cacheSolve(a)
a$getInv
cacheSolve(a)
set.seed(1)
rpois(5,2)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
install.packages("lattice")
library("lattice", lib.loc="C:/Users/asuspc/Documents/R/win-library/3.1")
library("lattice", lib.loc="C:/Program Files/R/R-3.1.0/library")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
airquality=transform(airquality, Month = factor(month))
airquality=transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data=airquality, facets=.~Month)
install.packages("ggplot2")
library("ggplot2", lib.loc="C:/Users/asuspc/Documents/R/win-library/3.1")
qplot(Wind, Ozone, data=airquality, facets=.~Month)
library(movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
10^0.30103
x<-rnorm(100)
y<-rnorm(100)
plot(x,y)
length<-c(75, 85, 91.6, 95, NA, 105.5, 106)
mean(length)
mean(length, na.rm=TRUE)
Month<-c(11,07,07,NA, 09, 09, 11)
Tb<-c(0,0,2,NA, 0,0,0)
Boar<- cbind(Month, length, Tb)
View(Boar)
dim(Boar)
nrow(Boar)
ncol(Boar)
Boar[ ,1]
Boar[3. ]
Boar[3, ]
Boar[3,6]
Boar[6,3]
Boar1<-rbind(Month, Tb, length)
View(Boar1)
View(Boar1)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
nlme？
？nlme
library(ggplot2)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
?transform
?aggregate
?sum
library("knitr")
install.packages("munsell")
exp40<-replicate(1000,rexp(40,0.2))
meanexp40<-apply(exp40,2,mean)
install.packages("formatR")
install.packages("formatR")
library("knitr")
install.packages(foreign)
library(foreign)
bodyfat<-read.dta("C:\Users\asuspc\Desktop\bodyfat")
bodyfat<-read.dta("C:/users/asuspc/Desktop/bodyfat.dta")
install.packages("devtools")
library(readstata13)
install.packages("readstata13")
devtools::install_github("sjewo/readstata13", ref="0.4")
library(readstata)
library(readstata)
library(readstata13)
bodyfat<-read.dta13("C:/users/asuspc/Desktop/bodyfat.dta")
View(bodyfat)
yourname<- readline("What is your name?")
h<- "Hello"
paste(h,yourname)
yourname
print(paste(h, yourname))
source('~/.active-rstudio-document')
cat("if you doubt whether it works")
choose(2,0.5)
choose(5,3)
library("gdata", lib.loc="~/R/win-library/3.1")
if(!require(installr)) {
install.packages("installr"); require(installr)}
updateR()
setwd("D:/Fan/Study/Freshman/Coursera/Getting Data/Project")
train<-read.table('./data/train/X_train.txt')
trainlabel<-read.table("./data/train/y_train.txt")
trainsubject <- read.table("./data/train/subject_train.txt")
test<- read.table("./data/test/X_test.txt")
testlabel <- read.table("./data/test/y_test.txt")
testsubject <- read.table("./data/test/subject_test.txt")
data<-rbind(train, test)
datalabel<-rbind(trainlabel, testlabel)
datasubject<-rbind(trainsubject, testsubject)
features <- read.table("features.txt")
features <- read.table("./data/features.txt")
View(features)
meanstd<-grep("-(mean|std)\\(\\)", features[, 2])
data<-data[, meanstd]
names(data)<-features[meanstd,2]
View(data)
View(datalabel)
activity <- read.table("./data/activity_labels.txt")
datalabel[, 1] <- activities[datalabel[, 1], 2]
datalabel[, 1] <- activity[datalabel[, 1], 2]
View(datalabel)
colnames(datalabel)[1]<-"activity"
View(datalabel)
View(datasubject)
names(datasubject)<-"Subject"
View(datasubject)
finaldata<-cbind(data, datalabel, datasubject)
View(finaldata)
mergedata<-read.table("./merged_data.txt")
View(mergedata)
finaldata<-cbind(datasubject, datalabel, data)
View(finaldata)
install.packages("plyr")
library(plyr)
finaldata_mean<-ddply(finaldata, .(subject, activity), function(x) colMeans(x[, 3:68]))
finaldata_mean<-ddply(finaldata, .(Subject, activity), function(x) colMeans(x[, 3:68]))
View(finaldata_mean)
dim(finaldata_mean)
View(finaldata)
dim(finaldata)
View(finaldata_mean)
install.packages("dplyr")
library(dplyr)
finaldata %>% group_by(Subject, activity) %>% summarise_each(funs(x) colMeans(x[, 3:68]))
finaldata %>% group_by(Subject, activity) %>% summarise_each(funs(mean), 3:68)
finaldatamean<- finaldata %>% group_by(Subject, activity) %>% summarise_each(funs(mean), 3:68)
View(finaldatamean)
write.table(finaldatamean, "data_mean.txt", row.name=FALSE)
mEAN<-read.table("./data_with_means.txt")
View(mEAN)
write.table(finaldata, "data.txt", row.names=FALSE)
1<-read.table("./data.txt")
1t<-read.table("./data.txt")
dt<-read.table("./data.txt")
View(dt)
View(mergedata)
dt<-read.table("./data.txt", header=TRUE)
View(dt)
View(dt)
remove dt
remove(dt)
remove(mEAN)
remove(mergedata)
View(datasubject)
View(features)
View(test)
View(activity)
